<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>追风</title>
  
  <subtitle>我的前端之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huchenh.github.io/"/>
  <updated>2019-04-19T15:21:20.908Z</updated>
  <id>https://huchenh.github.io/</id>
  
  <author>
    <name>陈虎</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端性能监控</title>
    <link href="https://huchenh.github.io/2019/04/19/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    <id>https://huchenh.github.io/2019/04/19/前端性能监控/</id>
    <published>2019-04-19T15:20:12.000Z</published>
    <updated>2019-04-19T15:21:20.908Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;W3C性能小组引入的新的API window.performance，目前IE9以上的浏览器都支持。它是一个浏览器中用于记录页面加载和解析过程中关键时间点的对象。放置在global环境下，通过JavaScript可以访问到它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用性能API&quot;&gt;&lt;a href=&quot;#使用性能API&quot; class=&quot;headerlink&quot; title=&quot;使用性能API&quot;&gt;&lt;/a&gt;使用性能API&lt;/h3&gt;&lt;p&gt;&lt;code&gt;探测和兼容performance：&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; performance = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.performance || &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.msPerformance || &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.webkitPerformance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(performance)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 支持性能 API&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;performance api结构&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;performance.memory&lt;/code&gt; 显示内存的占用情况，是一个动态值：&lt;ul&gt;
&lt;li&gt;usedJSHeapSize：表示：JS 对象（包括V8引擎内部对象）占用的内存数&lt;/li&gt;
&lt;li&gt;totalJSHeapSize： 可使用的内存&lt;/li&gt;
&lt;li&gt;jsHeapSizeLimit： 内存大小限制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;performance.navigation&lt;/code&gt; 显示页面的来源信息&lt;ul&gt;
&lt;li&gt;redirectCount：重定向的话，页面通过几次重定向跳转而来，默认为0；&lt;/li&gt;
&lt;li&gt;type：表示页面打开的方式&lt;ul&gt;
&lt;li&gt;0 表示 TYPE_NAVIGATENEXT 正常进入的页面（非刷新、非重定向等）&lt;/li&gt;
&lt;li&gt;1 表示 TYPE_RELOAD 通过 window.location.reload() 刷新的页面&lt;/li&gt;
&lt;li&gt;2 表示 TYPE_BACK_FORWARD 通过浏览器的前进后退按钮进入的页面（历史记录）&lt;/li&gt;
&lt;li&gt;255 表示 TYPE_UNDEFINED 非以上方式进入的页面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;performance.onresourcetimingbufferfull&lt;/code&gt;属性是一个在resourcetimingbufferfull事件触发时会被调用的 event handler 。它的值是一个手动设置的回调函数，这个回调函数会在浏览器的资源时间性能缓冲区满时执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;performance.timeOrigin&lt;/code&gt; 是一系列时间点的基准点，可以精确到万分之一毫秒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;performance.timing&lt;/code&gt;:是一系列关键时间点，它包含了网络、解析等一系列的时间数据
    
    </summary>
    
      <category term="前端三剑客" scheme="https://huchenh.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    
    
      <category term="性能" scheme="https://huchenh.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="https://huchenh.github.io/2019/04/16/%E8%B7%A8%E5%9F%9F/"/>
    <id>https://huchenh.github.io/2019/04/16/跨域/</id>
    <published>2019-04-16T15:47:58.000Z</published>
    <updated>2019-04-16T15:48:42.061Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;跨域解决方案：&quot;&gt;&lt;a href=&quot;#跨域解决方案：&quot; class=&quot;headerlink&quot; title=&quot;跨域解决方案：&quot;&gt;&lt;/a&gt;跨域解决方案：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;jsonp （常用）&lt;/li&gt;
&lt;li&gt;cors  （常用）&lt;/li&gt;
&lt;li&gt;window.name&lt;/li&gt;
&lt;li&gt;document.domain  （特定场景）&lt;/li&gt;
&lt;li&gt;postMessage (H5)&lt;/li&gt;
&lt;li&gt;webpack proxy （webScoket） （常用）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;什么是跨域？&quot;&gt;&lt;a href=&quot;#什么是跨域？&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域？&quot;&gt;&lt;/a&gt;什么是跨域？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;拿当前HTML页面的地址和在页面中AJAX请求的API地址做比较：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个地址的协议域名端口号都相同，相当于HTML页面从同一个源下根据某个地址获取数据，属于“同源策略请求”，基于AJAX是可以直接请求到数据的！&lt;/li&gt;
&lt;li&gt;如果三者（协议域名端口号）只要有一个不一样，那么就是“非同源策略请求（跨域请求）”，使用AJAX不能直接获取数据了！&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;   HTML页面的地址：&lt;a href=&quot;http://localhost:8000/A.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8000/A.html&lt;/a&gt;&lt;br&gt;   AJAX请求的地址：&lt;a href=&quot;http://localhost:8000/queryInfo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8000/queryInfo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   HTML页面地址：&lt;a href=&quot;http://localhost:63342/201802LESSON/%E5%85%AC%E5%BC%80%E8%AF%BE/%E8%B7%A8%E5%9F%9F/static/A.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:63342/201802LESSON/%E5%85%AC%E5%BC%80%E8%AF%BE/%E8%B7%A8%E5%9F%9F/static/A.html&lt;/a&gt;&lt;br&gt;   AJAX请求接口地址：&lt;a href=&quot;http://localhost:8000/queryInfo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8000/queryInfo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   [报错]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Failed to load &lt;a href=&quot;http://localhost:8000/queryInfo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8000/queryInfo&lt;/a&gt;: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘&lt;a href=&quot;http://localhost:63342&amp;#39;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:63342&amp;#39;&lt;/a&gt; is therefore not allowed access.&lt;br&gt;
    
    </summary>
    
      <category term="前端三剑客" scheme="https://huchenh.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    
    
      <category term="跨域" scheme="https://huchenh.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>node02</title>
    <link href="https://huchenh.github.io/2019/04/14/node02/"/>
    <id>https://huchenh.github.io/2019/04/14/node02/</id>
    <published>2019-04-14T08:11:01.000Z</published>
    <updated>2019-04-14T08:11:37.897Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;1.在本地项目中基于NPM/YARN安装第三方模块&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;第一步：在本地项目中创建一个“package.json”的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  作用：把当前项目所有依赖的第三方模块信息（包含：模块名称以及版本号等信息）都记录下来；可以在这里配置一些可执行的命令脚本等；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  基于YARN会默认生成一个“配置清单”，只是信息没有手动创建的全面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  npm init -y 或者 yarn init -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  创建配置清单的时候，项目目录中不应该出现中文和特殊符号，这样有可能识别不了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二步：安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  开发依赖：只有在项目开发阶段依赖的第三方模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  生产依赖：项目部署实施的时候，也需要依赖的第三方模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [npm]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    npm install xxx --save  保存到配置清单的生产依赖中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    --save-dev  保存到开发依赖中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [yarn]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    yarn add xxx 默认就是保存到生产依赖中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             --dev / -D  保存到开发依赖中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三步：部署的时候“跑环境”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  不要自己一个个的安装，只需要执行 npm install 或者 yarn install 即可，npm会自己先检测目录中是否有package.json文件，如果有的话，会按照文件中的配置清单依次安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt;开发一个项目，我们生成一个配置清单“package.json”，当我们安装第三方模块使用的时候，把安装的模块信息记录到配置清单中，这样以后不管是团队协作开发还是项目部署上线，我们都没有必要把node_modules发文件发送给别人，只需要把配置清单传递给其它人即可，其他人拿到配置清单后，按照清单中依赖项及版本号，重新安装即可（重新安装：“跑环境”）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="https://huchenh.github.io/categories/node/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
      <category term="node" scheme="https://huchenh.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>react05</title>
    <link href="https://huchenh.github.io/2019/04/10/react05/"/>
    <id>https://huchenh.github.io/2019/04/10/react05/</id>
    <published>2019-04-10T13:48:30.000Z</published>
    <updated>2019-04-10T13:49:12.979Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;复合组件：父组件嵌套子组件&quot;&gt;&lt;a href=&quot;#复合组件：父组件嵌套子组件&quot; class=&quot;headerlink&quot; title=&quot;复合组件：父组件嵌套子组件&quot;&gt;&lt;/a&gt;复合组件：父组件嵌套子组件&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;传递信息的方式&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;父组件需要把信息传递给子组件&lt;br&gt;“属性传递”：调取子组件的时候，把信息基于属性的方式传递给子组件（子组件PROPS中存储传递的信息）;这种方式只能父组件把信息传递子组件，子组件无法直接的把信息传递给父组件，也就是属性传递信息是单向传递的；&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vote&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &amp;#123;title, count&amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;&lt;/span&gt;&#39;&lt;span class=&quot;attr&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;panel-default&lt;/span&gt;&#39;&amp;#125; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;&amp;#123;width:&lt;/span&gt; &#39;&lt;span class=&quot;attr&quot;&gt;50&lt;/span&gt;%&#39;, &lt;span class=&quot;attr&quot;&gt;margin:&lt;/span&gt; &#39;&lt;span class=&quot;attr&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;auto&lt;/span&gt;&#39;&amp;#125;&amp;#125;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;VoteHead title=&amp;#123;title&amp;#125;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;上下文传递&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;父组件先把需要给后代元素（包括孙子元素）使用的信息都设置好（设置在上下文中），后代组件需要用到父组件中的信息，主动去父组件中调取使用即可&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://huchenh.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://huchenh.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>防抖和节流</title>
    <link href="https://huchenh.github.io/2019/04/07/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://huchenh.github.io/2019/04/07/防抖和节流/</id>
    <published>2019-04-07T04:05:36.000Z</published>
    <updated>2019-04-07T04:06:23.245Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;作为一名前端开发者，我们经常会处理各种事件，比如常见的click、scroll、 resize等等。仔细一想，会发现像scroll、scroll、onchange这类事件会频繁触发，如果我们在回调中计算元素位置、做一些跟DOM相关的操作，引起浏览器回流和重绘，频繁触发回调，很可能会造成浏览器掉帧，甚至会使浏览器崩溃，影响用户体验。针对这种现象，目前有两种常用的解决方案：防抖和节流。&lt;/p&gt;
&lt;h3 id=&quot;防抖（debounce）&quot;&gt;&lt;a href=&quot;#防抖（debounce）&quot; class=&quot;headerlink&quot; title=&quot;防抖（debounce）&quot;&gt;&lt;/a&gt;防抖（debounce）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;所谓防抖，就是指触发事件后，就是把触发非常频繁的事件合并成一次去执行。即在指定时间内只执行一次回调函数，如果在指定的时间内又触发了该事件，则回调函数的执行时间会基于此刻重新开始计算。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如：&lt;br&gt;&lt;code&gt;以我们生活中乘车刷卡的情景举例，只要乘客不断地在刷卡，司机师傅就不能开车，乘客刷卡完毕之后，司机会等待几分钟，确定乘客坐稳再开车。如果司机在最后等待的时间内又有新的乘客上车，那么司机等乘客刷卡完毕之后，还要再等待一会，等待所有乘客坐稳再开车。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;具体应该怎么去实现这样的功能呢？第一时间肯定会想到使用setTimeout方法，那我们就尝试写一个简单的函数来实现这个功能吧~&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; debounce = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn,delaytime&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; context = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      args = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeId &amp;amp;&amp;amp; clearTimeout(timeId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeId = setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fn.apply(context,args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, delaytime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端三剑客" scheme="https://huchenh.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>react04</title>
    <link href="https://huchenh.github.io/2019/04/02/react04/"/>
    <id>https://huchenh.github.io/2019/04/02/react04/</id>
    <published>2019-04-02T12:53:54.000Z</published>
    <updated>2019-04-02T12:54:20.320Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;REACT基础知识复习（一）：&quot;&gt;&lt;a href=&quot;#REACT基础知识复习（一）：&quot; class=&quot;headerlink&quot; title=&quot;REACT基础知识复习（一）：&quot;&gt;&lt;/a&gt;REACT基础知识复习（一）：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;REACT是FACE-BOOK公司开发的一款MVC版JS框架&lt;br&gt;MVC：Model（数据层）、VIEW（视图层）、CONTROLLER（控制层）&lt;br&gt;核心思想：通过数据的改变来影响视图的渲染（数据驱动）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于脚手架 CREATE-REACT-APP 快速构建一个REACT工程项目结构&lt;br&gt;自动安装REACT的核心组件：REACT/REACT-DOM&lt;br&gt;自动安装WEBPACK，并且完成相关的配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区分了开发环境和生产环境&lt;/li&gt;
&lt;li&gt;安装BABEL以及对应的语言解析包，可以把REACT和ES6进行编译处理&lt;/li&gt;
&lt;li&gt;安装CSS/STYLE/FILE等加载器，处理CSS等合并压缩的问题&lt;/li&gt;
&lt;li&gt;安装了ES-LINT，可以进行代码检测&lt;/li&gt;
&lt;li&gt;安装了很多的插件，可以实现JS和CSS以及HTML的分离，打包，压缩等&lt;/li&gt;
&lt;li&gt;安装了WEBPACK-DEV-SERVER，可以在开发环境下，编译后自动创建服务，打开浏览器，当代码修改后，自动保存编译，页面自动刷新渲染等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;使用脚手架&quot;&gt;&lt;a href=&quot;#使用脚手架&quot; class=&quot;headerlink&quot; title=&quot;使用脚手架&quot;&gt;&lt;/a&gt;使用脚手架&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;把脚手架安装到全局环境下，以后应用命令操作，完成项目结构的搭建&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ npm install create-react-app -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;创建项目结构目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  项目名遵循NPM发包命名规范：名字只能是/^[a-z0-9_-]$/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ create-react-app  项目名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;特点：如果当前电脑安装了YARN，创建工程目录的时候，走的是YARN安装，YARN和NPM主体相同，但是处理起来还有一定的区别，所以我们以后继续向工程中安装模块以及执行配置脚本打包编译的时候，尽可能使用YARN，不建议和NPM混用&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React" scheme="https://huchenh.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://huchenh.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react03</title>
    <link href="https://huchenh.github.io/2019/03/31/react03/"/>
    <id>https://huchenh.github.io/2019/03/31/react03/</id>
    <published>2019-03-31T13:01:29.000Z</published>
    <updated>2019-03-31T13:02:36.763Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JSX中的事件绑定：&quot;&gt;&lt;a href=&quot;#JSX中的事件绑定：&quot; class=&quot;headerlink&quot; title=&quot;JSX中的事件绑定：&quot;&gt;&lt;/a&gt;JSX中的事件绑定：&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;render()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;btn btn-success&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;              onClick=&amp;#123;this.support&amp;#125;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;          支持&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;support(ev)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//=&amp;gt;THIS:undefined（不是我们理解的当前操作的元素）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//=&amp;gt;ev.target：通过事件源可以获取当前操作的元素（一般很少操作，因为框架主要是数据驱动所有DOM的改变）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果能让方法中的THIS变成当前类的实例就好了，这样可以操作属性和状态等信息&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;render()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //=&amp;gt;THIS:实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   return &amp;lt;button className=&amp;apos;btn btn-success&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              onClick=&amp;#123;this.support.bind(this)&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          支持&amp;lt;/button&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;support(ev)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //=&amp;gt;THIS:实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;render()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //=&amp;gt;THIS:实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   return &amp;lt;button className=&amp;apos;btn btn-success&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              onClick=&amp;#123;this.support&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          支持&amp;lt;/button&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;support=ev=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //=&amp;gt;THIS:继承上下文中的THIS（实例）, 真实项目中，给JSX元素绑定的事件方法一般都是箭头函数，目的是为了保证函数中的THIS还是实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="React" scheme="https://huchenh.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://huchenh.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react02</title>
    <link href="https://huchenh.github.io/2019/03/29/react02/"/>
    <id>https://huchenh.github.io/2019/03/29/react02/</id>
    <published>2019-03-29T11:56:38.000Z</published>
    <updated>2019-03-29T11:57:21.673Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JSX渲染机制&quot;&gt;&lt;a href=&quot;#JSX渲染机制&quot; class=&quot;headerlink&quot; title=&quot;JSX渲染机制&quot;&gt;&lt;/a&gt;JSX渲染机制&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;基于BABEL中的语法解析模块（BABEL-PRESET-REACT）把JSX语法编译为 React.createElement(…) 结构&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;React.createElement(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;h1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;&lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;titleBox&#39;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;title&#39;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;: styleObj&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;\u73E0\u5CF0\u57F9\u8BAD&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//转义字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;执行React.createElement(type, props, children)，创建一个对象（虚拟DOM）&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   type:&lt;span class=&quot;string&quot;&gt;&#39;h1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   props:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     id:&lt;span class=&quot;string&quot;&gt;&#39;titleBox&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     className:&lt;span class=&quot;string&quot;&gt;&#39;title&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     style:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     children:&lt;span class=&quot;string&quot;&gt;&#39;珠峰培训&#39;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;//存放的是素中的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ref:&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   key:&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   __proto__:&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="React" scheme="https://huchenh.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://huchenh.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react01</title>
    <link href="https://huchenh.github.io/2019/03/26/react01/"/>
    <id>https://huchenh.github.io/2019/03/26/react01/</id>
    <published>2019-03-26T12:23:36.000Z</published>
    <updated>2019-03-26T12:24:46.246Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;React是FaceBook（脸书）公司研发的一款JS框架（MVC）&lt;/p&gt;
&lt;h3 id=&quot;React的脚手架&quot;&gt;&lt;a href=&quot;#React的脚手架&quot; class=&quot;headerlink&quot; title=&quot;React的脚手架&quot;&gt;&lt;/a&gt;React的脚手架&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;React是一款框架：具备自己开发的独立思想(MVC：Model View Controller)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;划分组件开发&lt;/li&gt;
&lt;li&gt;基于路由的SPA单页面开发&lt;/li&gt;
&lt;li&gt;基于ES6来编写代码(最后部署上线的时候，我们需要把ES6编译成ES5 =&amp;gt;基于Babel来完成编译)&lt;/li&gt;
&lt;li&gt;可能用到Less/Sass等，我们也需要使用对应的插件把他们进行预编译&lt;/li&gt;
&lt;li&gt;最后为了优化性能（减少HTTP请求次数），我们需要把JS或者CSS进行合并压缩&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;li&gt;webpack来完成以上页面组件合并、JS/CSS编译加合并等工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;前端工程化开发&quot;&gt;&lt;a href=&quot;#前端工程化开发&quot; class=&quot;headerlink&quot; title=&quot;前端工程化开发&quot;&gt;&lt;/a&gt;前端工程化开发&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基于框架的组件化/模块化开发&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于WEBPACK的自动部署&lt;/p&gt;
&lt;p&gt;但是配置WEBPACK是一个相对复杂的工作，我们需要自己安装很多的包，还需要自己写相对复杂的配置文件…如果我们有一个插件，基于它可以快速构建一套完整的自动化工程项目结构，那么有助于提高开发的效率 =&amp;gt;“脚手架”&lt;br&gt;VUE：VUE-CLI&lt;br&gt;REACT：CREATE-REACT-APP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;create-react-app-的使用&quot;&gt;&lt;a href=&quot;#create-react-app-的使用&quot; class=&quot;headerlink&quot; title=&quot;create-react-app 的使用&quot;&gt;&lt;/a&gt;create-react-app 的使用&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;$ npm install create-react-app -g&lt;br&gt;  把模块安装在全局环境下（目的：可以使用命令），MAC电脑安装的时候，前面需要加SUDO，否则没有权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;$ create-react-app [项目名称]&lt;br&gt;  基于脚手架命令，创建出一个基于React的自动化/工程化项目目录，和npm发包时候的命名规范一样，项目名称中不能出现：大写字母、中文汉字、特殊符号（-或者_是可以的）等&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="React" scheme="https://huchenh.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://huchenh.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>js知识梳理十五</title>
    <link href="https://huchenh.github.io/2019/03/24/js%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E5%8D%81%E4%BA%94/"/>
    <id>https://huchenh.github.io/2019/03/24/js知识梳理十五/</id>
    <published>2019-03-24T10:25:43.000Z</published>
    <updated>2019-03-24T10:26:22.990Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;知识点：AJAX&quot;&gt;&lt;a href=&quot;#知识点：AJAX&quot; class=&quot;headerlink&quot; title=&quot;知识点：AJAX&quot;&gt;&lt;/a&gt;知识点：AJAX&lt;/h2&gt;&lt;h3 id=&quot;async-javascript-and-xml-异步的JS和XML&quot;&gt;&lt;a href=&quot;#async-javascript-and-xml-异步的JS和XML&quot; class=&quot;headerlink&quot; title=&quot;async javascript and xml 异步的JS和XML&quot;&gt;&lt;/a&gt;async javascript and xml 异步的JS和XML&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在AJAX中的异步不是我们理解的同步异步编程，而是泛指“局部刷新”，但是我们在以后的AJAX请求中尽可能使用异步获取数据（因为异步数据获取不会阻塞下面代码的执行）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;XML是一种文件格式（我们可以把HTML理解为XML的一种）：可扩展的标记语言，它的作用是用自己扩展的一些语义标签来存储一些数据和内容，这样存储的好处是清晰的展示出数据的结构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;很久以前，AJAX刚刚兴起的时候，客户端从服务器端获取数据，服务器为了清晰的表达数据结构，都是返回XML格式的内容，当下，我们获取的数据一般都是JSON格式的内容，JSON相对于XML来说，也能清晰表达数据结构，而且访问里面数据的时候操作起来比XML更简便（但是现在某些项目中，服务器返回给客户端的数据不单纯是数据，而是数据和需要展示的结构拼接好的结果(类似于我们自己做的字符串拼接)，换句话说，是服务器端把数据和结构拼接好返回给我们，此时返回的数据格式一般都是XML格式的字符串）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;AJAX操作&quot;&gt;&lt;a href=&quot;#AJAX操作&quot; class=&quot;headerlink&quot; title=&quot;AJAX操作&quot;&gt;&lt;/a&gt;AJAX操作&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//=&amp;gt;创建AJAX实例：IE6中是不兼容的，使用的是new ActiveXObject来实现的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//=&amp;gt;打开请求：发送请求之前的一些配置项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1.HTTP METHOD 请求方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// GET/DELETE/HEAD/OPTIONS/TRACE/CONNECT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// POST/PUT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2.URL 向服务器端发送请求的API（Application Programming Interface）接口地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//3.ASYNC 设置AJAX请求的同步异步，默认是异步（写TRUE也是异步），FALSE是同步，项目中都使用异步编程，防止阻塞后续代码执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//4.USER-NAME/USER-PASS：用户名密码，一般不用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.open([HTTP METHOD],[URL],[ASYNC],[USER-NAME],[USER-PASS]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//=&amp;gt;3.事件监听：一般监听的都是 READY-STATE-CHANGE 事件（AJAX状态改变事件），基于这个事件可以获取服务器返回的响应头响应主体内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onreadystatechange=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(xhr.readyState===&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;amp;&amp;amp; xhr.status===&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       xhr.responseText;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//=&amp;gt;4.发送AJAX请求：从这步开始，当前AJAX任务开始，如果AJAX是同步的，后续代码不会执行，要等到AJAX状态成功后在执行，反之异步不会&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send([请求主体内容]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="HTTP" scheme="https://huchenh.github.io/categories/HTTP/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
      <category term="ajax" scheme="https://huchenh.github.io/tags/ajax/"/>
    
      <category term="http" scheme="https://huchenh.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>js知识梳理十四</title>
    <link href="https://huchenh.github.io/2019/03/24/js%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E5%8D%81%E5%9B%9B/"/>
    <id>https://huchenh.github.io/2019/03/24/js知识梳理十四/</id>
    <published>2019-03-24T10:21:33.000Z</published>
    <updated>2019-03-24T10:22:13.504Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前端开发性能优化方案&quot;&gt;&lt;a href=&quot;#前端开发性能优化方案&quot; class=&quot;headerlink&quot; title=&quot;前端开发性能优化方案&quot;&gt;&lt;/a&gt;前端开发性能优化方案&lt;/h2&gt;&lt;h3 id=&quot;一、减少HTTP请求次数和请求大小&quot;&gt;&lt;a href=&quot;#一、减少HTTP请求次数和请求大小&quot; class=&quot;headerlink&quot; title=&quot;一、减少HTTP请求次数和请求大小&quot;&gt;&lt;/a&gt;一、减少HTTP请求次数和请求大小&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;代码优化&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有利于SEO&lt;/li&gt;
&lt;li&gt;有利于扩展维护&lt;/li&gt;
&lt;li&gt;有利于减少性能消耗&lt;br&gt;[JS代码优化的108条建议]  [雅虎CSS优化的36条建议]&lt;br&gt;…&lt;/li&gt;
&lt;li&gt;DNS及HTTP通信方式的优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;在JS中尽量减少闭包的使用（原因：闭包会产生不释放的栈内存）&quot;&gt;&lt;a href=&quot;#在JS中尽量减少闭包的使用（原因：闭包会产生不释放的栈内存）&quot; class=&quot;headerlink&quot; title=&quot;在JS中尽量减少闭包的使用（原因：闭包会产生不释放的栈内存）&quot;&gt;&lt;/a&gt;在JS中尽量减少闭包的使用（原因：闭包会产生不释放的栈内存）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;循环给元素做事件绑定的时候，尽可能的把后期需要的信息（例如索引）存储到元素的自定义属性上，而不是创建闭包存储&lt;/li&gt;
&lt;li&gt;可以在最外层形成一个闭包，把一些后续需要的公共信息进行存储，而不是每一个方法都创建闭包(例如单例模式)&lt;/li&gt;
&lt;li&gt;尽可能的手动释放不被占用的内存&lt;br&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;尽量合并CSS和JS文件（把需要引入的CSS合并为一个，JS也是合并为一个），原理是在减少HTTP请求次数，尽可能的把合并后的代码进行压缩，减小HTTP请求资源的大小&quot;&gt;&lt;a href=&quot;#尽量合并CSS和JS文件（把需要引入的CSS合并为一个，JS也是合并为一个），原理是在减少HTTP请求次数，尽可能的把合并后的代码进行压缩，减小HTTP请求资源的大小&quot; class=&quot;headerlink&quot; title=&quot;尽量合并CSS和JS文件（把需要引入的CSS合并为一个，JS也是合并为一个），原理是在减少HTTP请求次数，尽可能的把合并后的代码进行压缩，减小HTTP请求资源的大小&quot;&gt;&lt;/a&gt;尽量合并CSS和JS文件（把需要引入的CSS合并为一个，JS也是合并为一个），原理是在减少HTTP请求次数，尽可能的把合并后的代码进行压缩，减小HTTP请求资源的大小&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;webpack这种自动化构建工具，可以帮我们实现代码的合并和压缩（工程化开发）&lt;/li&gt;
&lt;li&gt;在移动开发(或者追求高性能的PC端开发[例如百度首页])，如果CSS或者JS不是需要很多，我们可以选择把css和js编程内嵌式（也就是代码直接写在HTML中）
    
    </summary>
    
      <category term="HTTP" scheme="https://huchenh.github.io/categories/HTTP/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
      <category term="性能优化" scheme="https://huchenh.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>git基础二</title>
    <link href="https://huchenh.github.io/2019/03/21/git%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <id>https://huchenh.github.io/2019/03/21/git基础二/</id>
    <published>2019-03-21T15:00:44.000Z</published>
    <updated>2019-03-21T15:01:55.739Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;GIT：分布式版本控制系统&lt;br&gt;  1.版本控制系统&lt;br&gt;    开发中我们把每一次的修改都有效的进行记录（记录成一个版本），后期如果需要回退到原有的有个版本或者是用当前的和某一个版本进行比较等，都可以有效的进行管理&lt;br&gt;    常用的版本控制系统：SVN(集中式) / GIT(分布式)&lt;/p&gt;
&lt;p&gt;  2.分布式版本管理系统的特点&lt;/p&gt;
&lt;p&gt;  3.Linux团队开发的git，所以git中的命令大部分都是linux命令&lt;/p&gt;
&lt;p&gt;=======================&lt;br&gt;后期我们更多的都是基于命令来完成GIT管理的,所以我们学一些简单的LINUX命令&lt;br&gt;  WINDOWS操作系统：DOS窗口和DOS命令&lt;br&gt;  LINUX服务器操作系统：LINUX命令 （MAC的终端使用的也是LINUX命令）&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="https://huchenh.github.io/categories/git/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
      <category term="git" scheme="https://huchenh.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>js知识梳理十三</title>
    <link href="https://huchenh.github.io/2019/03/17/js%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E5%8D%81%E4%B8%89/"/>
    <id>https://huchenh.github.io/2019/03/17/js知识梳理十三/</id>
    <published>2019-03-17T14:30:48.000Z</published>
    <updated>2019-03-17T14:31:29.680Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一：减少HTTP请求的次数及请求内容的大小&quot;&gt;&lt;a href=&quot;#一：减少HTTP请求的次数及请求内容的大小&quot; class=&quot;headerlink&quot; title=&quot;一：减少HTTP请求的次数及请求内容的大小&quot;&gt;&lt;/a&gt;一：减少HTTP请求的次数及请求内容的大小&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;URL/URN/URI&lt;br&gt;URI=URL+URN&lt;br&gt;URI：统一资源标识符&lt;br&gt;URL：统一资源定位符&lt;br&gt;URN：统一资源名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.zhufengpeixun.cn:80/stu/index.html?name=xxx&amp;amp;age=25#teacher&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.zhufengpeixun.cn:80/stu/index.html?name=xxx&amp;amp;age=25#teacher&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;传输协议&quot;&gt;&lt;a href=&quot;#传输协议&quot; class=&quot;headerlink&quot; title=&quot;传输协议&quot;&gt;&lt;/a&gt;&lt;code&gt;传输协议&lt;/code&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;用来传输客户端和服务器端交互的信息的（类似于快递小哥）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP：超文本传输协议（除了传递普通的文本，还可以传递文件流或者进制编码等信息），是目前最常用的WEB传输协议&lt;/li&gt;
&lt;li&gt;HTTPS：基于SSL（Secure Sockets Layer 安全套接层）加密的HTTP传输协议，比HTTP更加的安全（涉及支付的网站一般都是基于HTTPS完成的）&lt;/li&gt;
&lt;li&gt;FTP：文件传输协议，一般用来实现资源文件在服务器上的上传下载&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;[域名] Domain Name&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一级域名（顶级域名）  www.qq.com
二级域名   sports.qq.com
三级域名   kbs.sports.qq.com

.com 供商用的国际域名
.cn 供商用的中文域名
.net 用于网络供应服务商（系统类的经常使用NET域名）
.org 用于官方组织
.edu 用于教育院校
.gov 用于政府机构
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="前端三剑客" scheme="https://huchenh.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    
    
      <category term="HTTP" scheme="https://huchenh.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>node基础01</title>
    <link href="https://huchenh.github.io/2019/03/14/node01/"/>
    <id>https://huchenh.github.io/2019/03/14/node01/</id>
    <published>2019-03-14T13:29:47.000Z</published>
    <updated>2019-03-14T13:35:52.141Z</updated>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是NODE？&lt;br&gt;基于V8引擎（谷歌浏览器的引擎）渲染JS的工具或者环境&lt;br&gt;-&amp;gt;安装NODE&lt;br&gt;-&amp;gt;把JS代码放到NODE环境中执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装NODE&lt;br&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;node安装完成后&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前电脑上自动安装了npm(Node Package Manager)：一个JS模块（所有封装好可以供其它人调取使用的都可以称之为模块或者包）管理的工具，基于npm可以安装下载JS模块&lt;/li&gt;
&lt;li&gt;它会生成一个node执行的命令（可以在DOS窗口或者终端命令中执行）：node xxx.js&lt;/li&gt;
&lt;li&gt;如果不成功，可以找相同电脑配置的人员，把安装成功的NODE文件夹拷贝到自己的电脑上，通过配置环境变量，来实现NODE安装
    
    </summary>
    
      <category term="node" scheme="https://huchenh.github.io/categories/node/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
      <category term="node" scheme="https://huchenh.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>promiseA+02</title>
    <link href="https://huchenh.github.io/2019/03/12/promiseA+02/"/>
    <id>https://huchenh.github.io/2019/03/12/promiseA+02/</id>
    <published>2019-03-12T15:43:17.000Z</published>
    <updated>2019-03-14T13:28:17.651Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;promise代码实现&quot;&gt;&lt;a href=&quot;#promise代码实现&quot; class=&quot;headerlink&quot; title=&quot;promise代码实现&quot;&gt;&lt;/a&gt;promise代码实现&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Promise 实现 遵循promise/A+规范&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Promise/A+规范译文:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// promise 三个状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; PENDING = &lt;span class=&quot;string&quot;&gt;&quot;pending&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; FULFILLED = &lt;span class=&quot;string&quot;&gt;&quot;fulfilled&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; REJECTED = &lt;span class=&quot;string&quot;&gt;&quot;rejected&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;excutor&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; that = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 缓存当前promise实例对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.status = PENDING; &lt;span class=&quot;comment&quot;&gt;// 初始状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//  fulfilled状态时 返回的信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.reason = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//  rejected状态时 拒绝的原因&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  that.onFulfilledCallbacks = []; &lt;span class=&quot;comment&quot;&gt;// 存储fulfilled状态对应的onFulfilled函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  that.onRejectedCallbacks = []; &lt;span class=&quot;comment&quot;&gt;// 存储rejected状态对应的onRejected函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// value成功态时接收的终值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(value &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; promise)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value.then(resolve,reject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 为什么resolve 加setTimeout?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 2.2.4规范 onFulfilled 和 onRejected 只允许在 execution context 栈仅包含平台代码时运行.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 注1 这里的平台代码指的是引擎、环境以及 promise 的实施代码。实践中要确保 onFulfilled 和 onRejected 方法异步执行，且应该在 then 方法被调用的那一轮事件循环之后的新执行栈中执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 调用resolve 回调对应onFulfilled函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(that.status == PENDING)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 只能由pending状态 =&amp;gt; fulfilled状态 (避免调用多次resolve reject)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          that.status = FULFILLED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          that.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          that.onFulfilledCallbacks.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;cb&lt;/span&gt;=&amp;gt;&lt;/span&gt;cb(that.value))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;reason&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;// reason失败态时接收的拒因&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 调用reject 回调对应onRejected函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(that.status == PENDING)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 只能由pending状态 =&amp;gt; rejected状态 (避免调用多次resolve reject)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        that.status = REJECTED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        that.value = reason;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        that.onRejectedCallbacks.ForEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;cb&lt;/span&gt;=&amp;gt;&lt;/span&gt;cb(that.reason))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 捕获在excutor执行器中抛出的异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// new Promise((resolve, reject) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//     throw new Error(&#39;error in excutor&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    excutor(resolve,reject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reject(e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端三剑客" scheme="https://huchenh.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
      <category term="promise" scheme="https://huchenh.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>promiseA+01</title>
    <link href="https://huchenh.github.io/2019/03/12/promiseA+01/"/>
    <id>https://huchenh.github.io/2019/03/12/promiseA+01/</id>
    <published>2019-03-12T15:40:44.000Z</published>
    <updated>2019-03-12T15:42:12.938Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JS中的同步异步编程&quot;&gt;&lt;a href=&quot;#JS中的同步异步编程&quot; class=&quot;headerlink&quot; title=&quot;JS中的同步异步编程&quot;&gt;&lt;/a&gt;JS中的同步异步编程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;浏览器是多线程的，JS是单线程的（浏览器只分配一个线程来执行JS）&lt;br&gt;进程大线程小：一个进程中包含多个线程，例如在浏览器中打开一个HTML页面就占用了一个进程，加载页面的时候，浏览器分配一个线程去计算DOM树，分配其它的线程去加载对应的资源文件…再分配一个线程去自上而下执行JS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;同步：在一个线程上（主栈/主任务队列）同一个时间只能做一件事情，当前事情完成才能进行下一个事情（先把一个任务进栈执行，执行完成，在把下一个任务进栈，上一个任务出栈…）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异步：在主栈中执行一个任务，但是发现这个任务是一个异步的操作，我们会把它移除主栈，放到等待任务队列中（此时浏览器会分配其它线程监听异步任务是否到达指定的执行时间）,如果主栈执行完成，监听者会把到达时间的异步任务重新放到主栈中执行…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;宏任务：macro task&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定时器&lt;/li&gt;
&lt;li&gt;事件绑定&lt;/li&gt;
&lt;li&gt;ajax&lt;/li&gt;
&lt;li&gt;回调函数&lt;/li&gt;
&lt;li&gt;Node中fs可以进行异步的I/O操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;微任务：micro task&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Promise(async/await)  =&amp;gt; Promise并不是完全的同步，当在Excutor中执行resolve或者reject的时候，此时是异步操作，会先执行then/catch等，当主栈完成后，才会再去调用resolve/reject把存放的方法执行&lt;/li&gt;
&lt;li&gt;&lt;p&gt;process.nextTick&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行顺序优先级：SYNC =&amp;gt; MICRO =&amp;gt; MACRO&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有JS中的异步编程仅仅是根据某些机制来管控任务的执行顺序，不存在同时执行两个任务这一说法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="前端三剑客" scheme="https://huchenh.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
      <category term="promise" scheme="https://huchenh.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>js知识梳理十二</title>
    <link href="https://huchenh.github.io/2019/03/12/js%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E5%8D%81%E4%BA%8C/"/>
    <id>https://huchenh.github.io/2019/03/12/js知识梳理十二/</id>
    <published>2019-03-12T13:13:43.000Z</published>
    <updated>2019-03-12T13:15:03.225Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;viewport-视口&quot;&gt;&lt;a href=&quot;#viewport-视口&quot; class=&quot;headerlink&quot; title=&quot;viewport 视口&quot;&gt;&lt;/a&gt;viewport 视口&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在PC端，我们开发的HTML页面运行在浏览器中，浏览器有多宽（一般浏览器代表设备的宽度）HTML就有多宽，也就是在浏览器宽度的视口中渲染和呈现我们的页面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;移动端和PC端有区别：不管移动端设备(代指打开的浏览器)的宽度是多少，HTML页面的宽度是980(或者1024) =&amp;gt;导致的问题：如果在设备窗口中想把整个页面完全呈现出来（小窗口中完全展示大页面），我们只能把大页面进行缩放，HTML页面缩放了，那么页面中所有内容都缩放了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;解决方案&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只要让H5页面的宽度和手机设备的宽度保持一致即可，就不会出现手机渲染页面的时候把页面缩放的事情了&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;此META标签就是在设置VP(视口)的规则&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   width=device-width：让HTML页面的宽度等于设备的宽度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   height=：设置HTML页面的高度（一般不用）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   initial-scale=1.0：初始缩放比例是1:1（也就是既不放大也不多小）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   user-scalable=no：禁止用户手动缩放&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   maximum-scale=1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   minimum-scale=1.0：设置最大最小的缩放比例1:1(既不放大也不缩小 =&amp;gt;部分安卓机中只设置user-scalable是不起作用的，需要同这两个一起使用)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端三剑客" scheme="https://huchenh.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>js知识梳理十一</title>
    <link href="https://huchenh.github.io/2019/03/11/js%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E5%8D%81%E4%B8%80/"/>
    <id>https://huchenh.github.io/2019/03/11/js知识梳理十一/</id>
    <published>2019-03-11T11:39:26.000Z</published>
    <updated>2019-03-11T11:40:08.431Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则应用&quot;&gt;&lt;a href=&quot;#正则应用&quot; class=&quot;headerlink&quot; title=&quot;正则应用&quot;&gt;&lt;/a&gt;正则应用&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;54389&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ary = [&lt;span class=&quot;string&quot;&gt;&#39;零&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;壹&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;贰&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;叁&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;肆&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;伍&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;陆&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;柒&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;捌&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;玖&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str = str.replace(&lt;span class=&quot;regexp&quot;&gt;/\d/g&lt;/span&gt;, item =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//=&amp;gt;item =&amp;gt;arg[0] =&amp;gt;正则每一次捕获的内容 5/4/3/8/9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//=&amp;gt;把捕获的数字做为索引，到ARY中找到对应的汉字，用找到的结果替换当前捕获的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ary[item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//30. 在javascript对象上定义一个repeatify函数,这个函数接受一个整数参数,来明确子字符串需要重复几次,这个函数要求字符串重复指定的次数,比如:’abc’.repeatify(3); //=&amp;gt;”abcabcabc”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.prototype.repeatify = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;repeatify&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//=&amp;gt;this:需要处理的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result += &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;.repeatify());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端三剑客" scheme="https://huchenh.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
      <category term="正则" scheme="https://huchenh.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>js知识梳理十</title>
    <link href="https://huchenh.github.io/2019/03/10/js%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E5%8D%81/"/>
    <id>https://huchenh.github.io/2019/03/10/js知识梳理十/</id>
    <published>2019-03-10T14:08:28.000Z</published>
    <updated>2019-03-10T14:09:15.913Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;js中的this&quot;&gt;&lt;a href=&quot;#js中的this&quot; class=&quot;headerlink&quot; title=&quot;js中的this&quot;&gt;&lt;/a&gt;js中的this&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;JS中的THIS汇总&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; THIS:当前方法执行的主体(谁执行的这个方法,那么THIS就是谁,所以THIS和当前方法在哪创建的或者在哪执行的都没有必然的关系)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给元素的某个事件绑定方法，方法中的THIS都是当前操作的元素本身&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//=&amp;gt;this:body&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;函数执行，看函数前面是否有点，有的话，点前面是谁THIS就是谁，没有点，THIS是WINDOW（在JS的严格模式下，没有点THIS是UNDEFINED）&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;哈哈&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fn: fn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fn();&lt;span class=&quot;comment&quot;&gt;//=&amp;gt;this:window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.fn();&lt;span class=&quot;comment&quot;&gt;//=&amp;gt;this:obj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端三剑客" scheme="https://huchenh.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>js知识梳理九</title>
    <link href="https://huchenh.github.io/2019/03/08/js%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86%E4%B9%9D/"/>
    <id>https://huchenh.github.io/2019/03/08/js知识梳理九/</id>
    <published>2019-03-08T15:42:46.000Z</published>
    <updated>2019-03-08T15:44:25.407Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则捕获&quot;&gt;&lt;a href=&quot;#正则捕获&quot; class=&quot;headerlink&quot; title=&quot;正则捕获&quot;&gt;&lt;/a&gt;正则捕获&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;把一个字符串中和正则匹配的部分获取到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;正则&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exec&lt;/li&gt;
&lt;li&gt;test&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;字符串&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;replace&lt;/li&gt;
&lt;li&gt;split&lt;/li&gt;
&lt;li&gt;match&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;基于EXEC可以实现正则的捕获&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果当前正则和字符串不匹配，捕获的结果是NULL&lt;/li&gt;
&lt;li&gt;如果匹配，捕获的结果是一个数组&lt;ul&gt;
&lt;li&gt;0:大正则捕获的内容&lt;/li&gt;
&lt;li&gt;index:正则捕获的起始索引&lt;/li&gt;
&lt;li&gt;input:原始操作的字符串&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执行一次EXEC只能捕获到第一个和正则匹配的内容，其余匹配的内容还没有捕获到，而且更恶心的是，我傻傻的执行多次，然而并没啥卵用 =&amp;gt;“正则的捕获有懒惰性”：只能捕获到第一个匹配的内容，剩余的默认捕获不到&lt;/li&gt;
&lt;li&gt;解决正则捕获的懒惰性，我们需要加全局修饰符G（这个是唯一的方案，而且不加G不管用什么办法捕获，也都不能把全部匹配的捕获到）
    
    </summary>
    
      <category term="前端三剑客" scheme="https://huchenh.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    
    
      <category term="javaScript" scheme="https://huchenh.github.io/tags/javaScript/"/>
    
      <category term="正则" scheme="https://huchenh.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
</feed>
